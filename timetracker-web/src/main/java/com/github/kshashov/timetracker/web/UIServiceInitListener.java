package com.github.kshashov.timetracker.web;

import com.github.kshashov.timetracker.web.security.SecurityUtils;
import com.github.kshashov.timetracker.web.ui.views.UserRegistrationPage;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.router.BeforeEnterEvent;
import com.vaadin.flow.server.ServiceInitEvent;
import com.vaadin.flow.server.VaadinServiceInitListener;
import com.vaadin.flow.shared.communication.PushMode;
import com.vaadin.flow.shared.ui.Transport;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;
import org.springframework.util.Base64Utils;

@Component
public class UIServiceInitListener implements VaadinServiceInitListener {
    @Override
    public void serviceInit(ServiceInitEvent event) {
        event.getSource().addUIInitListener(uiEvent -> {
            final UI ui = uiEvent.getUI();
            ui.addBeforeEnterListener(this::beforeEnter);
            ui.getPushConfiguration().setPushMode(PushMode.AUTOMATIC);
            ui.getPushConfiguration().setTransport(Transport.WEBSOCKET_XHR);
        });
    }

    private void beforeEnter(BeforeEnterEvent event) {
        if (requiresRegistration(event)) {
            String pathWithQueryParameters = event.getLocation().getPathWithQueryParameters();
            String currentUri = pathWithQueryParameters.equals(".") ? "" : StringUtils.stripStart(pathWithQueryParameters, "/");
            event.rerouteTo(UserRegistrationPage.USER_VALIDATION_URL, Base64Utils.encodeToString(currentUri.getBytes()));
        }
    }

    /**
     * @return True if user is not validated and request is not generated by Vaadin and is not matched with validation page
     */
    private boolean requiresRegistration(BeforeEnterEvent event) {
        return !UserRegistrationPage.class.equals(event.getNavigationTarget())
                && SecurityUtils.isUserLoggedIn()
                && !SecurityUtils.hasValidatedUser();
    }
}
