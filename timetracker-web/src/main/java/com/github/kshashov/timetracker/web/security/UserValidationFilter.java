package com.github.kshashov.timetracker.web.security;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.util.UrlUtils;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.util.Assert;
import org.springframework.util.Base64Utils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class UserValidationFilter extends OncePerRequestFilter {
    private final RedirectStrategy authorizationRedirectStrategy = new DefaultRedirectStrategy();
    private final AntPathRequestMatcher validationRequestMatcher;
    private final String validationUri;

    public UserValidationFilter(String validationUri) {
        Assert.isTrue(!StringUtils.isEmpty(validationUri) || UrlUtils.isValidRedirectUrl(validationUri),
                validationUri + " isn't a valid redirect URL");

        this.validationRequestMatcher = new AntPathRequestMatcher(StringUtils.stripEnd(validationUri, "/") + "/**", "GET");
        this.validationUri = StringUtils.stripStart(validationUri, "/");
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

        if (requiresClientSelect(request)) {
            String currentUri = StringUtils.stripStart(request.getRequestURI(), "/");
            String redirectUri = validationUri + "/" + Base64Utils.encodeToString(currentUri.getBytes());
            this.authorizationRedirectStrategy.sendRedirect(request, response, redirectUri);
            return;
        }

        filterChain.doFilter(request, response);
    }

    /**
     * @return True if user is not validated and request is not generated by Vaadin and is not matched with validation page
     */
    private boolean requiresClientSelect(HttpServletRequest request) {
        return !SecurityUtils.isFrameworkInternalRequest(request)
                && !validationRequestMatcher.matches(request)
                && SecurityUtils.isUserLoggedIn()
                && !SecurityUtils.hasValidatedUser();
    }
}
